I"ã<p>Iâ€™ll describe the process how to install Ruby on Rails application on Ubuntu from scratch.
But firstly we have to prepare our server for application.</p>

<p>We will use DigitalOcean.
Thereâ€™s a lot of kinds of droplets, Ruby on Rails included, and clean images based on Ubuntu and etc.
I prefer image with Ruby on Rails.</p>

<p>For the first, add your public SSH key for DigitalOcean, just copy it locally like:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">cat</span> ~/.ssh/id_rsa.pub| pbcopy <span class="c"># pbcopy is mac utility that allow you to copy text from console.:</span></code></pre></figure>

<p>Then put it to your DO profile.</p>

<p>First ssh connection will ask you for change password:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>passwd</code></pre></figure>

<p>Then we have to add user, which will be responsile for deploying our application:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>adduser deployer</code></pre></figure>

<p>And weâ€™ll add him all privileges:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>visudo
<span class="nv">$ </span>deployer <span class="nv">ALL</span><span class="o">=(</span>ALL:ALL<span class="o">)</span> ALL</code></pre></figure>

<p>This is it for now, leâ€™ts move to another part - software!
Letâ€™s start from RVM, ad install it:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>gpg <span class="nt">--keyserver</span> hkp://keys.gnupg.net <span class="nt">--recv-keys</span> 409B6B1796C275462A1703113804BB82D39DC0E3
<span class="nv">$ </span>curl <span class="nt">-sSL</span> https://get.rvm.io | bash <span class="nt">-s</span> stable
<span class="nv">$ </span><span class="nb">source</span> /etc/profile.d/rvm.sh
<span class="nv">$ </span>rvm requirements
<span class="nv">$ </span>rvm <span class="nb">install </span>2.2.2 <span class="nt">--default</span></code></pre></figure>

<p>Last postgresql version:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main"</span> <span class="o">&gt;</span> /etc/apt/sources.list.d/pgdg.list
<span class="nv">$ </span>wget <span class="nt">--quiet</span> <span class="nt">-O</span> - https://www.postgresql.org/media/keys/ACCC4CF8.asc | <span class="se">\ </span><span class="nb">sudo </span>apt-key add -
<span class="nv">$ </span><span class="nb">sudo </span>apt-get update
<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>postgresql postgresql-server-dev-9.4 <span class="nt">-y</span></code></pre></figure>

<p>Letâ€™s to allow any connections to our postgresql from localhost:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>nano /etc/postgresql/9.4/main/pg_hba.conf</code></pre></figure>

<p>And replace some configs inside:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">local </span>all postgres trust
<span class="nb">local </span>all all trust</code></pre></figure>

<p>Then, restart our postgres server:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">sudo </span>service postgresql restart</code></pre></figure>

<p>Settings password for root user for our DB, and create database for blog:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">sudo</span> <span class="nt">-u</span> postgres psql template1</code></pre></figure>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="k">USER</span> <span class="n">postgres</span> <span class="k">with</span> <span class="k">encrypted</span> <span class="n">password</span> <span class="s1">'po$tgr3$$'</span><span class="p">;</span>
<span class="k">create</span> <span class="k">database</span> <span class="n">customgears_production</span><span class="p">;</span></code></pre></figure>

<p>Other sofr - Git, Node.js:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">sudo </span>apt-get <span class="nb">install </span>git-core nodejs <span class="nt">-y</span></code></pre></figure>

<p>In case of our image that included Ruby on Rails, we already have some nginx configs for Rails:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>nano /etc/nginx/sites-available/rails</code></pre></figure>

<p>And nginx config will look like:</p>

<figure class="highlight"><pre><code class="language-nginx" data-lang="nginx"><span class="k">upstream</span> <span class="s">app_server</span> <span class="p">{</span>
  <span class="kn">server</span> <span class="s">unix:///home/rails/shared/tmp/sockets/puma.sock</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">server</span> <span class="p">{</span>
        <span class="kn">listen</span>   <span class="mi">80</span><span class="p">;</span>
        <span class="kn">root</span> <span class="n">/home/rails/current/public</span><span class="p">;</span>
        <span class="kn">server_name</span> <span class="s">customgears.net</span><span class="p">;</span>
        <span class="kn">index</span> <span class="s">index.htm</span> <span class="s">index.html</span><span class="p">;</span>

        <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
                <span class="kn">try_files</span> <span class="nv">$uri</span><span class="n">/index.html</span> <span class="nv">$uri</span><span class="s">.html</span> <span class="nv">$uri</span> <span class="s">@app</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kn">location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">^.+</span><span class="err">\</span><span class="s">.(jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|mp3|flv|mpeg|avi)</span>$ <span class="p">{</span>
                        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="s">@app</span><span class="p">;</span>
                <span class="p">}</span>

         <span class="kn">location</span> <span class="s">@app</span> <span class="p">{</span>
                <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
                <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
                <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>
                <span class="kn">proxy_pass</span> <span class="s">http://app_server</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Weâ€™ll just create symlink and make this site config enabled:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">sudo ln</span> <span class="nt">-sf</span> /etc/nginx/sites-available/rails /etc/nginx/sites-enabled/rails
<span class="nb">sudo </span>service nginx restart</code></pre></figure>

<p>If you have any questions - just ping us for help.</p>
:ET